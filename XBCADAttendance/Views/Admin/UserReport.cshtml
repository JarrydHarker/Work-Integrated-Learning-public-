@using XBCADAttendance.Models.ViewModels
@model AdminViewModel
@{
    Layout = "_AdminLayout";
}

<div class="head-title">
    <div class="left">
        <h1>Users</h1>
        <ul class="breadcrumb">
            <li><a href="#">Home</a></li>
            <li><i class='bx bx-chevron-right'></i></li>
            <li><a class="active" href="#">Users</a></li>
        </ul>
    </div>
</div>

<div class="table-data">
    <div class="order">
        <table id="userTable" class="styled-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Password</th>
                    <th>Role</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model.Users)
                {
                    <tr data-id="@Model.GetID(user)">
                        <td>@Model.GetID(user)</td>
                        <td contenteditable="true" class="editable" data-field="UserName">@user.UserName</td>
                        <td contenteditable="true" class="editable" data-field="Password">••••••</td>
                        <td class="role-cell" data-field="Role" data-original-role="@Model.GetRole(user)">
                            <span class="role-display">@Model.GetRole(user)</span>
                            <select class="form-control" id="role" style="display: none;">
                                @if (Model.lstRoles != null)
                                {
                                    @foreach (var role in Model.lstRoles)
                                    {
                                        <option>@role.RoleName</option>
                                    }
                                }
                            </select>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="buttons">
            <button id="saveChanges">Save</button>
            <button id="cancelChanges">Cancel</button>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const originalData = {};
        const editedData = {};

        // Track changes for UserName and Password
        document.querySelectorAll('.editable').forEach(cell => {
            cell.addEventListener('blur', (e) => {
                const rowId = cell.closest('tr').getAttribute('data-id');
                const newValue = e.target.textContent.trim(); // Use textContent for editable fields
                const field = cell.getAttribute('data-field');

                // Track changes for UserName and Password
                if (!originalData[rowId]) originalData[rowId] = {};
                if (!originalData[rowId][field]) originalData[rowId][field] = cell.textContent.trim(); // Capture original value
                if (!editedData[rowId]) editedData[rowId] = {};

                if (newValue !== originalData[rowId][field]) {
                    editedData[rowId][field] = newValue;
                } else {
                    delete editedData[rowId][field]; // Remove if value hasn't changed
                }
            });
        });

        // Toggle role dropdown
        document.querySelectorAll('.role-cell').forEach(cell => {
            cell.addEventListener('click', () => {
                const display = cell.querySelector('.role-display');
                const select = cell.querySelector('.form-control');

                if (display.style.display !== 'none') {
                    display.style.display = 'none';
                    select.style.display = 'inline';
                    select.value = cell.getAttribute('data-original-role');
                    select.focus();
                }
            });

            // Save selection on blur
            cell.querySelector('.form-control').addEventListener('blur', (e) => {
                const rowId = cell.closest('tr').getAttribute('data-id');
                const newValue = e.target.value;
                const field = cell.getAttribute('data-field');

                // Update display and original data
                cell.querySelector('.role-display').textContent = newValue;
                cell.querySelector('.role-display').style.display = 'inline';
                cell.querySelector('.form-control').style.display = 'none';

                // Track changes
                if (!originalData[rowId]) originalData[rowId] = {};
                if (!originalData[rowId][field]) originalData[rowId][field] = cell.getAttribute('data-original-role');
                if (!editedData[rowId]) editedData[rowId] = {};
                if (newValue !== originalData[rowId][field]) {
                    editedData[rowId][field] = newValue;
                } else {
                    delete editedData[rowId][field];
                }
            });
        });

        // Save changes
        document.getElementById('saveChanges').addEventListener('click', () => {
            fetch('/Admin/SaveChanges', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(editedData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Changes saved successfully');
                        Object.keys(editedData).forEach(key => delete editedData[key]);
                        Object.keys(originalData).forEach(key => delete originalData[key]);
                    } else {
                        alert('Error saving changes');
                    }
                });
        });

        // Cancel changes
        document.getElementById('cancelChanges').addEventListener('click', () => {
            Object.keys(originalData).forEach(rowId => {
                const row = document.querySelector(`tr[data-id="${rowId}"]`);
                Object.keys(originalData[rowId]).forEach(field => {
                    const cell = row.querySelector(`[data-field="${field}"]`);
                    if (field === 'Role') {
                        cell.querySelector('.role-display').textContent = originalData[rowId][field];
                        cell.setAttribute('data-original-role', originalData[rowId][field]);
                    } else {
                        cell.textContent = originalData[rowId][field];
                    }
                });
            });

            Object.keys(editedData).forEach(key => delete editedData[key]);
            Object.keys(originalData).forEach(key => delete originalData[key]);
        });
    });
</script>

<style>
    .styled-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 1em;
        font-family: Arial, sans-serif;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

        .styled-table thead tr {
            background-color: #CFE8FF;
            color: #3C91E6;
            text-align: left;
        }

        .styled-table th, .styled-table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
        }

        .styled-table tbody tr:hover {
            background-color: #f3f3f3;
        }

        .styled-table tbody tr:nth-of-type(even) {
            background-color: #f8f8f8;
        }

    .editable {
        cursor: pointer;
        background-color: #fcfcfc;
    }

        .editable:focus {
            background-color: #e0f7fa;
            outline: none;
            border-bottom: 2px solid #009879;
        }

    .role-display {
        cursor: pointer;
    }

    .role-select {
        display: none;
        padding: 5px;
        font-size: 1em;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }

    .buttons {
        margin-top: 15px;
    }

        .buttons button {
            margin-right: 10px;
            padding: 10px 15px;
            font-size: 1em;
            color: #fff;
            background-color: #3C91E6;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .buttons button:hover {
                background-color: #6C91E6;
            }

    .head-title h1 {
        font-size: 1.8em;
        font-weight: bold;
    }

    .head-title .breadcrumb li a {
        color: #009879;
        text-decoration: none;
    }
</style>
